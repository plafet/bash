#!/bin/sh

# Определяем имя скрипта
SCRIPT_NAME=$(basename "$0")

# Файл для хранения PID
PID_FILE="./pid_${SCRIPT_NAME}"
### Need To Fix (NTF) Файлы с хранящимся пидом обычно называют название_скрипта.pid кроме того надо добавить такие файлы в gitignore, чтобы гит никогда не брал их в контроль. Так же там обычно указывают логи и т.п. вещи

if [ ! -s "$PID_FILE" ]; then
    echo "файлик с PID пустой"
    echo $$ > "$PID_FILE"
    ### NTF внутреннее тело цикла надо табулировать, чтобы визуально было легче понимать где начало цикла, а где конец, например:
    ###  while true; do
    ###    do_something1
    ###    do_something2
    ###  done
    ###
    ###  while true; do
    ###    do_something3
    ###    do_something4
    ###  done
    
    while true; do
    sleep 2
    done
    else
    ### NTF тоже самое, у тебя else почему то табулирован, и все что дальше опять без этого 
        var=`cat $PID_FILE`
        ### NTF переменные надо называть так, чтобы было понятно что в них хранится их названия. У тебя же понятно только то, что это переменная. Если там хранится пид, то пусть называется pid или PID например
        if [ `ps aux | grep $var | awk '{print $2}' | head -n 1` -eq `cat $PID_FILE` ]; then
        ### NTF непонятно для чего тебе понадобилось делать `cat $PID_FILE` если выше ты вытаскиваешь это в переменную. Возникает вопрос, зачем тогда ты ее обхявлял, если не пользуешься?
        echo "Такой PID уже запущен. магии не будет"
        exit 1
        else 
        echo "pid $$ отличается от того, что записан в файл. Ура магия!"
        echo $$ > "$PID_FILE"
        ### повторяющиеся куски кода лучше выделять в функцию, это позволяет уменшить скрипт, и более гибко править код, в случае надобности. Вместо 1 места править 2 и больше
        while true; do
        sleep 2
        done
        fi
fi 
